package icrash.usecases.ugSecurelyUseSystem {

import icrash.environment
import icrash.usecases.subfunctions

Use Case Model {

	use case system usergoal ugSecurelyUseSystem() {
		actor actAuthenticated[primary,active]

		reuse oeLogin[1..1]
		reuse oeLogout[1..1]

		step a: actAuthenticated 
	    	executes oeLogin
		step b: actAuthenticated 
	     	executes oeLogout
	
		ordering constraint 
	 	"step (a) must always precede step (b)."
	}
	
	use case system usergoal ugSecurelyUseSystemWithSymmetricKey() {
		actor actAuthenticated[primary,active]
		
		reuse oeComputeKeySendAndGetRandomNumber[1..1]
		reuse oeSendNonceAndName[1..1]
		reuse oeDecryptSystemMessageAndSendEncryptedNonceBAndName[1..1]
		
		step a: actAuthenticated
			 executes oeComputeKeySendAndGetRandomNumber
	    step b: actAuthenticated
	         executes oeSendNonceAndName
	    step c: actAuthenticated
	         executes oeDecryptSystemMessageAndSendEncryptedNonceBAndName
	         
	    ordering constraint
	     "step (a) must always precede step (b)."
	    ordering constraint
	     "step (b) must always precede step (c)."
		
		}
		
	use case system usergoal ugSecurelyUseSystemWithBiometricData() {
		actor actAuthenticated[primary,active]
		
		reuse oeLoginUsingBiometric[1..1]
		reuse oeLogout[1..1]
				
		step a: actAuthenticated
			executes oeLoginUsingBiometric(AdtBiometricData)
		step b: actAuthenticated
			executes oeLogout()
			
		ordering constraint
<<<<<<< HEAD
		"step (a) must always precede step (b)."
		}
=======
		"step (a) must always precede step (b)."
		}
>>>>>>> refs/remotes/origin/master
	}
}