package icrash.usecases.ugSecurelyUseSystem {

import icrash.environment
import icrash.usecases.subfunctions

Use Case Model {

	use case system usergoal ugSecurelyUseSystem() {
		actor actAuthenticated[primary,active]

		reuse oeLogin[1..1]
		reuse oeLogout[1..1]

		step a: actAuthenticated 
	    	executes oeLogin
		step b: actAuthenticated 
	     	executes oeLogout
	
		ordering constraint 
	 	"step (a) must always precede step (b)."
	}
	
	  use case system usergoal ugSecurelyUseSystemWithSymmetricKey() {
        		actor actAuthenticated[primary,active]
        		
        		reuse oeSendRandomNumberForSymmetricKeyExchange[1..1]
        		reuse oeSendLoginAndNonceAndReceiveEncryptedNonceAndSystemNameWithNewNonceForSymmetricLogin[1..1]
        		reuse oeSendEncryptedLoginAndSystemNonceAndReceiveConfirmationMessageForSymmetricLogin[1..1]
        		
        		step a: actAuthenticated
        			 executes oeSendRandomNumberForSymmetricKeyExchange
        	    step b: actAuthenticated
        	         executes oeSendLoginAndNonceAndReceiveEncryptedNonceAndSystemNameWithNewNonceForSymmetricLogin
        	    step c: actAuthenticated
        	         executes oeSendEncryptedLoginAndSystemNonceAndReceiveConfirmationMessageForSymmetricLogin
        	         
        	    ordering constraint
        	     "step (a) must always precede step (b)."
        	    ordering constraint
        	     "step (b) must always precede step (c)."
        		
        		}
		
	use case system usergoal ugSecurelyUseSystemWithBiometricData() {
		actor actAuthenticated[primary,active]
		
		reuse oeLoginUsingBiometric[1..1]
		reuse oeLogout[1..1]
				
		step a: actAuthenticated
			executes oeLoginUsingBiometric(AdtBiometricData)
		step b: actAuthenticated
			executes oeLogout()
			
		ordering constraint
		"step (a) must always precede step (b)."
		}	
	}
}